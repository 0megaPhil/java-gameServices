type Query {
    allCharacters(limit: Int): [Character]
    allStats(limit: Int): [Stat]
    allSkills(limit: Int): [Skill]
    allRaces(limit: Int): [Race]
    createStat(input: StatInput): Stat
    updateStat(input: StatInput): Stat
    createSkill(input: SkillInput): Skill
    updateSkill(input: SkillInput): Skill
    createRace(input: RaceInput): Race
    updateRace(input: RaceInput): Race
    createCharacter(input: CharacterInput): Character
    updateCharacter(input: CharacterInput): Character
    createInventory(input: InventoryInput): Inventory
    updateInventory(input: InventoryInput): Inventory
    createItem(input: ItemInput): Item
    updateItem(input: ItemInput): Item
    createCurrency(input: CurrencyInput): Currency
    updateCurrency(input: CurrencyInput): Currency
    createInventoryItem(input: InventoryItemInput): InventoryItem
    updateInventoryItem(input: InventoryItemInput): InventoryItem
    createInventoryCurrency(input: InventoryCurrencyInput): InventoryCurrency
    updateInventoryCurrency(input: InventoryCurrencyInput): InventoryCurrency
    characterById(uuid: ID): Character
    charactersByName(name: String): [Character]
    inventoryById(uuid: ID): Inventory
    itemById(uuid: ID): Item
    inventoryItemById(uuid: ID): InventoryItem
    inventoryCurrencyById(uuid: ID): InventoryCurrency
    currencyById(uuid: ID): Currency
    userById(uuid: ID): User
    worldById(uuid: ID): World
    characterFlavor(uuid: ID): Flavor
}

type Flavor {
    targetId: ID!
    objectType: String!
    appearance: String!
    background: String!
    personality: String!
    summary: String!
}

type Race {
    uuid: ID!
    name: String!
    description: String
    worldId: ID
    characteristics: [Characteristic]
}

input RaceInput {
    uuid: ID
    name: String!
    description: String
    worldId: ID
    characteristics: [CharacteristicInput]
}

type Skill {
    uuid: ID!
    name: String!
    description: String
}

input SkillInput {
    uuid: ID
    name: String!
    description: String
}

type Stat {
    uuid: ID!
    name: String!
    description: String
}

input StatInput {
    uuid: ID
    name: String!
    description: String
}

type CharacterSkill {
    skillId: ID!
    name: String!
    skillValue: Int!
}

input CharacterSkillInput {
    skillId: ID!
    name: String
    skillValue: Int!
}

type CharacterStat {
    statId: ID!
    name: String
    statValue: Int!
}

type Character {
    uuid: ID!
    name: String!
    summary: String
    appearance: String
    personality: String
    background: String
    sex: String
    race: Race
    dimensions: [Dimension]
    user: User
    inventory: Inventory
    skills: [CharacterSkill]
    stats: [CharacterStat]
}

type Characteristic {
    value: String!
    name: String!
    description: String
}

input CharacteristicInput {
    value: String!
    name: String!
    description: String
}

type Dimension {
    value: String!
    name: String!
    unitType: String!
    description: String
}

input DimensionInput {
    value: String!
    name: String!
    unitType: String!
    description: String
}

input CharacterStatInput {
    statId: ID!
    name: String
    statValue: Int!
}

interface Attribute {
    value: String!
    name: String!
    description: String
}

input CharacterInput {
    uuid: ID
    name: String!
    summary: String
    appearance: String
    personality: String
    background: String
    sex: String
    race: RaceInput
    dimensions: [DimensionInput]
    user: UserInput
    inventory: InventoryInput
    skills: [CharacterSkillInput]
    stats: [CharacterStatInput]
}

input InventoryInput {
    uuid: ID
    characterId: ID
    items: [InventoryItemInput]
    currencies: [InventoryCurrencyInput]
}

type Inventory {
    uuid: ID!
    characterId: ID!
    items: [InventoryItem]
    currencies: [InventoryCurrency]
}

input InventoryItemInput {
    uuid: ID
    name: String
    itemId: ID!
    inventoryId: ID!
    quantity: Int!
}

input CurrencyInput {
    uuid: ID
    name: String!
    description: String!
    characteristics: [CharacteristicInput]
}

input InventoryCurrencyInput {
    uuid: ID
    name: String
    currencyId: ID!
    inventoryId: ID!
    quantity: Int!
}

input ItemInput {
    uuid: ID
    name: String!
    description: String
    characteristics: [CharacteristicInput]
}

type InventoryItem {
    uuid: ID!
    name: String
    itemId: ID!
    inventoryId: ID!
    quantity: Int!
}

type Currency {
    uuid: ID!
    name: String!
    description: String
    characteristics: [Characteristic]
}

type InventoryCurrency {
    uuid: ID!
    name: String
    currencyId: ID!
    inventoryId: ID!
    quantity: Int!
}

type Item {
    uuid: ID!
    name: String!
    description: String
    characteristics: [Characteristic]
}

type User {
    uuid: ID!
    firstName: String!
    lastName: String!
}

input UserInput {
    uuid: ID
    firstName: String!
    lastName: String!
}

type World {
    uuid: ID!
}
