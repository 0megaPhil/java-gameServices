extend type Query {
    findPlayer(options: Options): [Player]
    getPlayer(id: String): Player

    findSkill(options: Options): [Skill]
    getSkill(id: String): Skill

    findStat(options: Options): [Stat]
    getStat(id: String): Stat

    findRace(options: Options): [Race]
    getRace(id: String): Race

    findCreature(options: Options): [Creature]
    getCreature(id: String): Creature

    findProfession(options: Options): [Profession]
    getProfession(id: String): Profession
}

extend type Mutation {
    createPlayer(input: PlayerInput): Player
    updatePlayer(input: PlayerInput): Player
    flavorPlayer(id: String): Player
    deletePlayer(id: String): Boolean

    createSkill(input: SkillInput): Skill
    updateSkill(input: SkillInput): Skill
    flavorSkill(id: String): Skill
    deleteSkill(id: String): Boolean

    createStat(input: StatInput): Stat
    updateStat(input: StatInput): Stat
    flavorStat(id: String): Stat
    deleteStat(id: String): Boolean

    createRace(input: RaceInput): Race
    updateRace(input: RaceInput): Race
    flavorRace(id: String): Race
    deleteRace(id: String): Boolean

    createCreature(input: CreatureInput): Creature
    updateCreature(input: CreatureInput): Creature
    flavorCreature(id: String): Creature
    deleteCreature(id: String): Boolean

    createProfession(input: ProfessionInput): Profession
    updateProfession(input: ProfessionInput): Profession
    flavorProfession(id: String): Profession
    deleteProfession(id: String): Boolean
}

type Race implements CommonEntity {
    id: String
    name: String!
    type: Species!
    prompt: String
    characteristics: [Characteristic]
    distributions: [Distribution]
    summary: String
    created: DateTime
    updated: DateTime
    version: Int
    error: Error
}

input RaceInput {
    id: String
    name: String!
    type: Species!
    characteristics: [CharacteristicInput]
    distributions: [DistributionInput]
    summary: String
    prompt: String
}

enum Sexes {
    MALE,
    FEMALE,
    HERMAPHRODITIC,
    ASEXUAL,
    OTHER
}

type Player implements CommonEntity {
    id: String
    name: String
    sex: Sexes
    race: Race
    user: User
    profession: Profession
    inventory: Inventory
    dimensions: [Dimension]
    skills: [SkillEntry]
    stats: [StatEntry]
    attributes: [AttributeEntry]
    features: [Feature]
    histories: [History]
    effects: [EffectEntry]
    prompt: String
    characteristics: [Characteristic]
    summary: String
    created: DateTime
    updated: DateTime
    version: Int
    error: Error
}

input PlayerInput {
    id: String
    name: String
    sex: Sexes
    race: RaceInput
    user: UserInput
    profession: ProfessionInput
    inventory: InventoryInput
    dimensions: [DimensionInput]
    skills: [SkillEntryInput]
    stats: [StatEntryInput]
    attributes: [AttributeEntryInput]
    features: [FeatureInput]
    histories: [HistoryInput]
    effects: [EffectEntryInput]
    characteristics: [CharacteristicInput]
    summary: String
    prompt: String
}

type NPC implements CommonEntity {
    id: String
    name: String
    sex: Sexes
    race: Race
    user: User
    profession: Profession
    inventory: Inventory
    dimensions: [Dimension]
    skills: [SkillEntry]
    stats: [StatEntry]
    attributes: [AttributeEntry]
    features: [Feature]
    histories: [History]
    effects: [EffectEntry]
    prompt: String
    characteristics: [Characteristic]
    summary: String
    created: DateTime
    updated: DateTime
    version: Int
    error: Error
}

input NPCInput {
    id: String
    name: String
    sex: Sexes
    race: RaceInput
    user: UserInput
    profession: ProfessionInput
    inventory: InventoryInput
    dimensions: [DimensionInput]
    features: [FeatureInput]
    histories: [HistoryInput]
    skills: [SkillEntryInput]
    stats: [StatEntryInput]
    attributes: [AttributeEntryInput]
    effects: [EffectEntryInput]
    characteristics: [CharacteristicInput]
    summary: String
    prompt: String
}

type Creature implements CommonEntity {
    id: String
    name: String!
    type: Species!
    sex: Sexes
    inventory: Inventory
    profession: Profession
    dimensions: [Dimension]
    skills: [SkillEntry]
    stats: [StatEntry]
    attributes: [AttributeEntry]
    effects: [EffectEntry]
    features: [Feature]
    histories: [History]
    prompt: String
    characteristics: [Characteristic]
    summary: String
    created: DateTime
    updated: DateTime
    version: Int
    error: Error
}

input CreatureInput {
    id: String
    name: String!
    type: Species!
    sex: Sexes
    inventory: InventoryInput
    profession: ProfessionInput
    dimensions: [DimensionInput]
    skills: [SkillEntryInput]
    stats: [StatEntryInput]
    attributes: [AttributeEntryInput]
    features: [FeatureInput]
    histories: [HistoryInput]
    effects: [EffectEntryInput]
    characteristics: [CharacteristicInput]
    summary: String
    prompt: String
}

enum Species {
    HOMINID
    META_HOMINID
    HOMINID_DEUM
    REPTILIAN
    XENOBIOTIC
    AVIAN
    ANIMALIA
    ICHTHYS
    PLANTAE
    FUNGI
    OTHER
}

