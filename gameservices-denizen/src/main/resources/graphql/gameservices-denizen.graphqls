extend type Query {
    findDenizen(options: Options): [Denizen]
    getDenizen(id: String): Denizen

    findAttribute(options: Options): [Attribute]
    getAttribute(id: String): Attribute

    findProfession(options: Options): [Profession]
    getProfession(id: String): Profession
}

extend type Mutation {
    createDenizen(input: DenizenInput): Denizen
    updateDenizen(input: DenizenInput): Denizen
    flavorDenizen(id: String): Denizen
    deleteDenizen(id: String): Boolean

    createAttribute(input: AttributeInput): Attribute
    updateAttribute(input: AttributeInput): Attribute
    flavorAttribute(id: String): Attribute
    deleteAttribute(id: String): Boolean

    createProfession(input: ProfessionInput): Profession
    updateProfession(input: ProfessionInput): Profession
    flavorProfession(id: String): Profession
    deleteProfession(id: String): Boolean
}

enum Sexes {
    MALE,
    FEMALE,
    HERMAPHRODITIC,
    ASEXUAL,
    OTHER
}

type Denizen implements CommonEntity {
    id: String
    name: String
    type: Entities
    user: User
    profession: Profession
    inventory: Inventory
    entries: [AttributeEntry]
    features: [Feature]
    summary: String
    created: DateTime
    updated: DateTime
    version: Int
    error: Error
}

input DenizenInput {
    id: String
    name: String
    user: UserInput
    type: Entities = PLAYER
    profession: ProfessionInput
    inventory: InventoryInput
    entries: [AttributeEntryInput] = []
    features: [FeatureInput] = []
    summary: String
}

