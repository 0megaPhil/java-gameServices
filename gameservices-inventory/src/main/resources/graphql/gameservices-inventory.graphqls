extend type Query {
    findInventory(options: Options): [Inventory]
    getInventory(id: String): Inventory

    findItem(options: Options): [Item]
    getItem(id: String): Item
}

extend type Mutation {
    createInventory(input: InventoryInput): Inventory
    updateInventory(input: InventoryInput): Inventory
    flavorInventory(id: String): Inventory
    deleteInventory(id: String): Boolean

    createItem(input: ItemInput): Item
    updateItem(input: ItemInput): Item
    flavorItem(id: String): Item
    deleteItem(id: String): Boolean
}

input InventoryInput {
    id: String
    items: [InventoryItemInput]
    currencies: [InventoryCurrencyInput]
    flavor: FlavorInput
    prompt: String
}

type Inventory implements CommonEntity {
    id: String
    items: [InventoryItem]
    currencies: [InventoryCurrency]
    prompt: String
    flavor: Flavor
    created: DateTime
    updated: DateTime
    version: Int
    error: Error
}

input InventoryItemInput {
    item: ItemInput!
    value: Float!
}

input InventoryCurrencyInput {
    currency: CurrencyInput!
    value: Float!
}

input ItemInput {
    id: String
    name: String!
    flavor: FlavorInput
    prompt: String
    dimensions: [DimensionInput]
}

type InventoryItem implements CommonValue {
    item: Item!
    value: Float!
}

type InventoryCurrency implements CommonValue {
    currency: Currency!
    value: Float!
}

type Item implements CommonEntity {
    id: String
    name: String!
    dimensions: [Dimension]
    prompt: String
    flavor: Flavor
    created: DateTime
    updated: DateTime
    version: Int
    error: Error
}
