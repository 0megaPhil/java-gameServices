extend type Query {
    findTransaction(options: Options): [Transaction]
    getTransaction(id: String): Transaction

    findCurrency(options: Options): [Currency]
    getCurrency(id: String): Currency
}

extend type Mutation {
    createTransaction(input: TransactionInput): Transaction
    updateTransaction(input: TransactionInput): Transaction
    flavorTransaction(id: String): Transaction
    deleteTransaction(id: String): Boolean

    createCurrency(input: CurrencyInput): Currency
    updateCurrency(input: CurrencyInput): Currency
    flavorCurrency(id: String): Currency
    deleteCurrency(id: String): Boolean
}

input TransactionInput {
    id: String
    type: Flavors
    inventoryId: String
    currency: CurrencyInput!
    itemIds: [String]
    features: [FeatureInput] = []
    entries: [AttributeEntryInput] = []
    summary: String
}

type Transaction implements CommonEntity {
    id: String
    type: Flavors
    inventoryId: String!
    currency: Currency
    itemIds: [String]
    features: [Feature]
    entries: [AttributeEntry]
    summary: String
    created: DateTime
    updated: DateTime
    version: Int
    error: Error
}

input CurrencyInput {
    id: String
    name: String!
    type: Flavors = CURRENCY
    baseCurrency: CurrencyInput
    features: [FeatureInput] = []
    entries: [AttributeEntryInput] = []
    summary: String
    baseMultiplier: Int = 1
}

type Currency implements CommonEntity {
    id: String
    name: String!
    type: Flavors
    baseCurrency: Currency
    features: [Feature]
    entries: [AttributeEntry]
    summary: String
    created: DateTime
    updated: DateTime
    version: Int
    baseMultiplier: Int
    error: Error
}
