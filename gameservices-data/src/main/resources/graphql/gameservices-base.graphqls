scalar DateTime
scalar Object

# CommonEntity inheritors are static and used to generated data model
# This is to be used for more complex domain model exposures
interface CommonEntity {
    id: String
    type: Entities
    entries: [AttributeEntry]
    features: [Feature]
    summary: String
    created: DateTime
    updated: DateTime
    version: Int
    error: Error
}

enum Entities {
    PLAYER
    NPC
    MONSTER
    BAG
    BOX
    BACKPACK
    CHEST
    TRANSACTION
    PROFESSION
    DEMON
    SPIRIT
    DRAGON
    CREATURE
    INVENTORY
    ITEM
    WORLD
    TERRAIN
    USER
    DESERT
    FORREST
    PLAINS
    TUNDRA
    OCEAN
    SEA
    LAKE
    MOUNTAINS
    DUNGEON
    URBAN
    LABYRINTH
    INDOORS
    VOID
    RIVER
    SKY
    LUNAR
    AQUATIC
    STONE_AGE
    BRONZE_AGE
    IRON_AGE
    PRE_INDUSTRIAL_AGE
    INDUSTRIAL_AGE
    INFORMATION_AGE
    NEAR_FUTURE
    FAR_FUTURE
    PRE_SINGULARITY
    SINGULARITY
    NO_MAGIC
    LOW_MAGIC
    TERRAN
    JUNGLE
    FOREST
    ICE
    SNOW
    LAVA
    FLOATING
    HOLLOW
    MAGICAL
    DIALOG
    PARTY_CHANGE
    CHARACTER
    ECONOMIC
    POLITICAL
    MODERATE_MAGIC
    HIGH_MAGIC
    INHERENT_MAGIC
    ATTRIBUTE
    FEATURE
    COMBAT
    DIMENSION
    HISTORY
    PERSONALITY
    RACE
    SEX
    QUALITY
    TRAIT
    RARITY
    GENDER
    AGE
    FLAW
    PHOBIA
    DEFORMITY
    SICKNESS
    HEIGHT
    WEIGHT
    MASS
    TIME
    TEMPORAL
    DISTANCE
    LENGTH
    WIDTH
    EFFECT
    SKILL
    STAT
    PHYSICAL
    MENTAL
    SOCIAL
    APPEARANCE
    CURSE
    HEALTH
    MANA
    SANITY
    ENERGY
    PATIENCE
    BACKGROUND
    UPBRINGING
    PAST
    EVENT
    JOURNEY
    LORE
    STORY
    CULTURE
    EXPERIENCE
    TRAUMA
    FEAR
    RIVAL
    REGRET
    RECORD
    WEAPON
    ARMOR
    TOOL
    UTILITY
    GARBAGE
    JUNK
    VALUABLE
    JEWELRY
    GEM
    SCRAP
    FUNGIBLE
    CURRENCY
    TIN
    COPPER
    DOLLAR
    SILVER
    GOLD
    PLATINUM
    PAPER
    SCRIPT
    IOU
    CHECK
    LEAD
    MARKER
    MISC
    OTHER
}

interface CommonObject {
    targetId: String
}

interface CommonValue {
    value: Float
}

input Options {
    filters: [Filter]
    sortBy: String
    limit: Int!
}

input Filter {
    byField: String!
    forValue: String!
}

type Flavor implements CommonObject {
    targetId: String!
    summary: String!
    objectType: String!
    features: [Feature]!
}

input FlavorInput {
    targetId: String
    title: String
    summary: String
    objectType: String
    features: [FeatureInput] = []
}

type Error implements CommonObject {
    targetId: String
    title: String
    type: ErrorTypes
    path: String
    headers: String
    params: String
    objectType: String
    message: String
    errorCode: Int
    data: String
}

enum ErrorTypes {
    MONGODB
    GRAPHQL
    WEB
    FLAVOR
    INTERNAL
    OTHER
}

enum Operations {
    CREATE_ONE
    CREATE_MANY
    UPDATE_ONE
    UPDATE_MANY
    FIND_BY_ID
    FIND_BY_IDS
    FIND_ONE_LIKE
    FIND_ALL_LIKE
    DELETE_ONE
    DELETE_BY_ID
    DELETE_BY_IDS
}

type ErrorResponse implements CommonEntity {
    id: String
    type: Entities
    queryId: String
    method: String
    headers: String
    path: String
    uri: String
    params: String
    features: [Feature]
    entries: [AttributeEntry]
    summary: String
    created: DateTime
    updated: DateTime
    version: Int
    error: Error
}

type Feature implements CommonObject {
    targetId: String
    rarity: Rarity
    context: Contexts
    title: String!
    type: Features
    description: String
}

enum Features {
    DESCRIPTION
    SUMMARY
    PHYSICAL
    MENTAL
    POLITICAL
    GEOGRAPHIC
    TOPOLOGICAL
    MAGICAL
    ALIGNMENT
    ECONOMIC
    SOCIAL
    ESOTERIC
    EMOTIONAL
    IMPLICIT
    EXPLICIT
    OTHER
}

input FeatureInput {
    targetId: String
    type: Features
    title: String!
    description: String
    context: Contexts = OTHER
    rarity: Rarity = COMMON
}

type Attribute implements CommonEntity {
    id: String
    type: Entities
    name: String
    entryLimit: Int
    entries: [AttributeEntry]
    features: [Feature]
    rarity: Rarity
    unitType: String
    summary: String
    created: DateTime
    updated: DateTime
    version: Int
    error: Error
    lowest: Float
    lower: Float
    low: Float
    average: Float
    high: Float
    higher: Float
    highest: Float
}

input AttributeInput {
    id: String
    type: Entities
    name: String
    entryLimit: Int = 1
    entries: [AttributeEntryInput] = null
    features: [FeatureInput] = []
    rarity: Rarity
    unitType: String
    summary: String
    lowest: Float
    lower: Float
    low: Float
    average: Float
    high: Float
    higher: Float
    highest: Float
}

type Profession implements CommonEntity {
    id: String
    name: String!
    type: Entities
    requiredEntries: [AttributeEntry]
    value: Float
    context: Contexts
    entries: [AttributeEntry]
    features: [Feature]
    summary: String
    created: DateTime
    updated: DateTime
    version: Int
    error: Error
}

input ProfessionInput {
    id: String
    name: String!
    type: Entities = PROFESSION
    requiredEntries: [AttributeEntryInput] = []
    context: Contexts = OTHER
    value: Float
    entries: [AttributeEntryInput] = []
    features: [FeatureInput] = []
    summary: String
}

type AttributeEntry implements CommonValue {
    attribute: Attribute
    value: Float
    text: String
    prompt: String
    context: Contexts
    summary: String
}

input AttributeEntryInput {
    attribute: AttributeInput
    value: Float
    text: String
    prompt: String
    context: Contexts = OTHER
    summary: String
}

enum Contexts {
    LOWEST_POSSIBLE
    VERY_BELOW_AVERAGE
    BELOW_AVERAGE
    AVERAGE
    ABOVE_AVERAGE
    VERY_ABOVE_AVERAGE
    HIGHEST_POSSIBLE
    OTHER
}

enum Rarity {
    VERY_COMMON
    COMMON
    UNCOMMON
    RARE
    VERY_RARE
    PRICELESS
    UNIQUE
    OTHER
}